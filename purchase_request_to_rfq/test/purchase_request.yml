-
  I log as the Purchase User
-
  !context
    uid: 'res_users_purchase_user'
-
  I create an RFQ.
-
  !python {model: purchase.request.line.make.purchase.order}: |
    context.update({"active_model": "purchase.request.line","active_ids": [ref("request_line1")],"active_id": ref("request_line1")})
-
  !record {model: purchase.request.line.make.purchase.order, id: request_line_make_po_0}:
    supplier_id: base.res_partner_12
-
  !python {model: purchase.request.line.make.purchase.order}: |
    self.make_purchase_order(cr, uid, [ref("request_line_make_po_0")], context=context)
-
  I check that the RFQ details which created for supplier.
-
  !python {model: purchase.order.line}: |
    request_obj = self.pool["purchase.request"]
    request_line_obj = self.pool["purchase.request.line"]
    request = request_obj.browse(cr, uid, ref("request1"), context=context)
    rfq_line = False
    for pr_line in request.line_ids:
        assert len(pr_line.purchase_lines) == 1, "No purchase order line was created."
        for po_line in pr_line.purchase_lines:
            rfq_line = po_line
    rfq = rfq_line.order_id
    supplier = rfq.partner_id
    assert supplier.id == ref('base.res_partner_12'), "RFQ Partner does not match."
    assert len(rfq.order_line) == len(request.line_ids), "Lines do not match."
    for rfq_line in rfq.order_line:
        for line in request.line_ids:
            if rfq_line.product_id.id == line.product_id.id:
                assert rfq_line.product_id == line.product_id, "Product does not match."
                assert rfq_line.state == line.purchase_state, "State does not match"