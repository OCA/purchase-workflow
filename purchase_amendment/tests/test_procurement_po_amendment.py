# -*- coding: utf-8 -*-
#
#
#    Authors: Alexandre Fayolle, Leonardo Pistone
#    Copyright 2015 Camptocamp SA
#
#    This program is free software: you can redistribute it and/or modify
#    it under the terms of the GNU Affero General Public License as
#    published by the Free Software Foundation, either version 3 of the
#    License, or (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU Affero General Public License for more details.
#
#    You should have received a copy of the GNU Affero General Public License
#    along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
#

from openerp.tests import common

from .helper import AmendmentMixin
from openerp import netsvc


class TestResupplyAmendment(common.TransactionCase, AmendmentMixin):
    def setUp(self):
        super(TestResupplyAmendment, self).setUp()
        cr, uid, context = self.cr, self.uid, {}
        self.amendment_model = self.registry('purchase.order.amendment')
        self.purchase_model = self.registry('purchase.order')
        self.purchase_line_model = self.registry('purchase.order.line')
        data_model = self.registry('ir.model.data')

        _, partner1_id = data_model.get_object_reference(cr, uid, 'base',
                                                         'res_partner_2')
        self.partner1 = self.registry('res.partner').browse(cr, uid,
                                                            partner1_id,
                                                            context=context)

        _, product2_id = data_model.get_object_reference(cr, uid, 'product',
                                                         'product_product_9')
        self.product2 = self.registry('product.product').browse(
            cr, uid, product2_id, context=context)

        _, location_stock_id = data_model.get_object_reference(
            cr, uid, 'stock', 'stock_location_stock')
        self.location_stock = self.registry('stock.location').browse(
            cr, uid, location_stock_id, context=context)

        _, purchase_pricelist_id = data_model.get_object_reference(
            cr, uid, 'purchase', 'list0')
        self.purchase_pricelist = self.registry('product.pricelist').browse(
            cr, uid, purchase_pricelist_id, context=context)

        _, warehouse_id = data_model.get_object_reference(
            cr, uid, 'stock', 'warehouse0')

        order_point = self.registry('stock.warehouse.orderpoint')
        op_data = {'warehouse_id': warehouse_id,
                   'location_id': location_stock_id,
                   'logic': 'max',
                   'product_min_qty': 80,
                   'product_max_qty': 123,
                   'qty_multiple': 1,
                   }

        self.order_points = []

        self.product2.seller_ids[0].name = self.partner1
        op_data['product_id'] = self.product2.id
        op_data['product_uom'] = self.product2.uom_id.id
        op_id = order_point.create(cr, uid, op_data, context=context)
        self.order_points.append(order_point.browse(cr, uid, op_id,
                                                    context=context))
        self.registry('procurement.order').run_scheduler(cr, uid,
                                                         automatic=True,
                                                         context=context)
        for order_point in self.order_points:
            self.purchase = order_point.procurement_id.purchase_id
            break

        self.purchase_model.write(cr, uid, self.purchase.id,
                                  {'invoice_method': 'manual'},
                                  context=context)
        wf_service = netsvc.LocalService("workflow")
        wf_service.trg_validate(uid, 'purchase.order', self.purchase.id,
                                'purchase_confirm', cr)

    def test_po(self):
        cr, uid, context = self.cr, self.uid, {}
        self.assert_moves(cr, uid, [
            (self.product2, 101, 'assigned'),
        ], context=context)
        self.assert_purchase_lines(cr, uid, [
            (self.product2, 101, 'confirmed'),
        ], context=context)

    def test_not_received_reduce_quantity(self):
        """Given I have a confirmed PO generated by a procurement
        And I haven't received anything
        When I amend it to reduce the quantity of a line
        Then the order line is split with states "cancel" and "confirmed"
        And the stock move is split with states "cancel" and "assigned"

        """
        cr, uid, context = self.cr, self.uid, {}
        amendment = self.amend(cr, uid, context=context)
        self.assertRecordsetEqual([
            {'product_id': self.product2,
             'original_qty': 101,
             'new_qty': 101,
             'state': 'assigned'},
        ], amendment.item_ids)
        amendment = self.amend_product(cr, uid, amendment, self.product2, 30,
                                       context=context)
        self.assertRecordsetEqual([
            {'product_id': self.product2,
             'original_qty': 101,
             'new_qty': 30,
             'state': 'assigned'},
        ], amendment.item_ids)

        self.amendment_model.do_amendment(cr, uid, [amendment.id],
                                          context=context)
        self.assert_purchase_lines(cr, uid, [
            (self.product2, 71., 'cancel'),
            (self.product2, 30., 'confirmed')
        ], context=context)

        self.assert_moves(cr, uid, [
            (self.product2, 71, 'cancel'),
            (self.product2, 30, 'assigned'),
        ], context=context)

        self.assertEqual(self.purchase.state, 'approved')

    def test_ship_and_cancel_part(self):
        """Given I have a confirmed PO generated by a procurement
        And I haven't received anything
        When I amend it to reduce the quantity of a line
        Then the order line is split with states "cancel", "confirmed"
        And the stock move is split with states "cancel", "done", "assigned"

        """
        cr, uid, context = self.cr, self.uid, {}
        self.ship(cr, uid, [(self.product2, 51)], context=context)
        moves = []
        for picking in self.purchase.picking_ids:
            for move in picking.move_lines:
                moves.append(move)

        self.assert_moves(cr, uid, [
            (self.product2, 51, 'done'),
            (self.product2, 50, 'assigned'),
        ], context=context)

        amendment = self.amend(cr, uid, context=context)
        amendment = self.amend_product(cr, uid, amendment, self.product2, 30,
                                       context=context)
        self.assertRecordsetEqual([
            {'product_id': self.product2,
             'original_qty': 51,
             'new_qty': 51,
             'state': 'done'},
            {'product_id': self.product2,
             'original_qty': 50,
             'new_qty': 30,
             'state': 'assigned'}
        ], amendment.item_ids)

        self.amendment_model.do_amendment(cr, uid, [amendment.id],
                                          context=context)
        self.assert_purchase_lines(cr, uid, [
            (self.product2, 20., 'cancel'),
            (self.product2, 81., 'confirmed')
        ], context=context)

        self.assert_moves(cr, uid, [
            (self.product2, 51., 'done'),
            (self.product2, 20., 'cancel'),
            (self.product2, 30., 'assigned')
        ], context=context)

        self.assertEqual(self.purchase.state, 'approved')

    def test_cancel_one_line(self):
        """Given I have a confirmed PO generated by a procurement
        And I haven't received anything
        When I amend it to reduce the quantity of a line to zero
        Then the order line has state "cancel"
        And the stock move has state "cancel"

        """
        cr, uid, context = self.cr, self.uid, {}
        amendment = self.amend(cr, uid, context=context)
        amendment = self.amend_product(cr, uid, amendment, self.product2, 0.,
                                       context=context)
        self.assert_amendment_items(cr, uid, amendment.item_ids, [
            (self.product2, 101., 0., 'assigned'),
        ], context=context)

        self.amendment_model.do_amendment(cr, uid, [amendment.id],
                                          context=context)
        self.assert_purchase_lines(cr, uid, [
            (self.product2, 101., 'cancel'),
        ], context=context)

        self.assert_moves(cr, uid, [
            (self.product2, 101., 'cancel')
        ], context=context)

        self.assertEqual(self.purchase.state, 'approved')

    def test_amend_more(self):
        """Given I have a confirmed PO generated by a procurement
        And I haven't received anything
        When I amend it to increase the quantity of a line
        Then the order line is split with states "confirmed" and "confirmed"
        And the stock move is split with states "confirmed" and "assigned"

        """
        cr, uid, context = self.cr, self.uid, {}
        amendment = self.amend(cr, uid, context=context)
        amendment = self.amend_product(cr, uid, amendment, self.product2, 150.,
                                       context=context)

        self.assert_amendment_items(cr, uid, amendment.item_ids, [
            (self.product2, 101., 150., 'assigned'),
        ], context=context)

        self.amendment_model.do_amendment(cr, uid, [amendment.id],
                                          context=context)

        self.assert_purchase_lines(cr, uid, [
            (self.product2, 150., 'confirmed'),
        ], context=context)

        self.assert_moves(cr, uid, [
            (self.product2, 150., 'assigned')
        ], context=context)
        self.assertEqual(self.purchase.state, 'approved')

    def test_ship_amend_more(self):
        cr, uid, context = self.cr, self.uid, {}
        self.ship(cr, uid, [(self.product2, 20)],
                  context=context)
        amendment = self.amend(cr, uid, context=context)
        amendment = self.amend_product(cr, uid, amendment, self.product2,
                                       150., context=context)
        self.assert_amendment_items(cr, uid, amendment.item_ids, [
            (self.product2, 20., 20., 'done'),
            (self.product2, 81., 150., 'assigned'),
        ], context=context)

        self.amendment_model.do_amendment(cr, uid, [amendment.id],
                                          context=context)

        self.assert_purchase_lines(cr, uid, [
            (self.product2, 170., 'confirmed'),
        ], context=context)

        self.assert_moves(cr, uid, [
            (self.product2, 20., 'done'),
            (self.product2, 150., 'assigned')
        ], context=context)

        self.assertEqual(self.purchase.state, 'approved')
